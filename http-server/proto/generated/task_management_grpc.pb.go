// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/task_management.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskManagementService_CreateTask_FullMethodName     = "/proto.TaskManagementService/CreateTask"
	TaskManagementService_CreateTasks_FullMethodName    = "/proto.TaskManagementService/CreateTasks"
	TaskManagementService_CreateTaskList_FullMethodName = "/proto.TaskManagementService/CreateTaskList"
	TaskManagementService_GetAllTask_FullMethodName     = "/proto.TaskManagementService/GetAllTask"
	TaskManagementService_GetTaskById_FullMethodName    = "/proto.TaskManagementService/GetTaskById"
	TaskManagementService_UpdateTaskById_FullMethodName = "/proto.TaskManagementService/UpdateTaskById"
	TaskManagementService_DeleteTaskById_FullMethodName = "/proto.TaskManagementService/DeleteTaskById"
	TaskManagementService_UserLogin_FullMethodName      = "/proto.TaskManagementService/UserLogin"
	TaskManagementService_UserRegister_FullMethodName   = "/proto.TaskManagementService/UserRegister"
)

// TaskManagementServiceClient is the client API for TaskManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagementServiceClient interface {
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Message, error)
	CreateTasks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Task, Message], error)
	CreateTaskList(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Task, Task], error)
	GetAllTask(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*TaskList, error)
	GetTaskById(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	UpdateTaskById(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTaskById(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Message, error)
	UserLogin(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Message, error)
	UserRegister(ctx context.Context, in *User, opts ...grpc.CallOption) (*Message, error)
}

type taskManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagementServiceClient(cc grpc.ClientConnInterface) TaskManagementServiceClient {
	return &taskManagementServiceClient{cc}
}

func (c *taskManagementServiceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, TaskManagementService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) CreateTasks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Task, Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskManagementService_ServiceDesc.Streams[0], TaskManagementService_CreateTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Task, Message]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskManagementService_CreateTasksClient = grpc.ClientStreamingClient[Task, Message]

func (c *taskManagementServiceClient) CreateTaskList(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Task, Task], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskManagementService_ServiceDesc.Streams[1], TaskManagementService_CreateTaskList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Task, Task]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskManagementService_CreateTaskListClient = grpc.BidiStreamingClient[Task, Task]

func (c *taskManagementServiceClient) GetAllTask(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskManagementService_GetAllTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) GetTaskById(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskManagementService_GetTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) UpdateTaskById(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskManagementService_UpdateTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) DeleteTaskById(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, TaskManagementService_DeleteTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) UserLogin(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, TaskManagementService_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementServiceClient) UserRegister(ctx context.Context, in *User, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, TaskManagementService_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagementServiceServer is the server API for TaskManagementService service.
// All implementations must embed UnimplementedTaskManagementServiceServer
// for forward compatibility.
type TaskManagementServiceServer interface {
	CreateTask(context.Context, *Task) (*Message, error)
	CreateTasks(grpc.ClientStreamingServer[Task, Message]) error
	CreateTaskList(grpc.BidiStreamingServer[Task, Task]) error
	GetAllTask(context.Context, *NoParam) (*TaskList, error)
	GetTaskById(context.Context, *TaskId) (*Task, error)
	UpdateTaskById(context.Context, *Task) (*Task, error)
	DeleteTaskById(context.Context, *TaskId) (*Message, error)
	UserLogin(context.Context, *UserInfo) (*Message, error)
	UserRegister(context.Context, *User) (*Message, error)
	mustEmbedUnimplementedTaskManagementServiceServer()
}

// UnimplementedTaskManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskManagementServiceServer struct{}

func (UnimplementedTaskManagementServiceServer) CreateTask(context.Context, *Task) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskManagementServiceServer) CreateTasks(grpc.ClientStreamingServer[Task, Message]) error {
	return status.Errorf(codes.Unimplemented, "method CreateTasks not implemented")
}
func (UnimplementedTaskManagementServiceServer) CreateTaskList(grpc.BidiStreamingServer[Task, Task]) error {
	return status.Errorf(codes.Unimplemented, "method CreateTaskList not implemented")
}
func (UnimplementedTaskManagementServiceServer) GetAllTask(context.Context, *NoParam) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTask not implemented")
}
func (UnimplementedTaskManagementServiceServer) GetTaskById(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedTaskManagementServiceServer) UpdateTaskById(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskById not implemented")
}
func (UnimplementedTaskManagementServiceServer) DeleteTaskById(context.Context, *TaskId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskById not implemented")
}
func (UnimplementedTaskManagementServiceServer) UserLogin(context.Context, *UserInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedTaskManagementServiceServer) UserRegister(context.Context, *User) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedTaskManagementServiceServer) mustEmbedUnimplementedTaskManagementServiceServer() {}
func (UnimplementedTaskManagementServiceServer) testEmbeddedByValue()                               {}

// UnsafeTaskManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagementServiceServer will
// result in compilation errors.
type UnsafeTaskManagementServiceServer interface {
	mustEmbedUnimplementedTaskManagementServiceServer()
}

func RegisterTaskManagementServiceServer(s grpc.ServiceRegistrar, srv TaskManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskManagementService_ServiceDesc, srv)
}

func _TaskManagementService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_CreateTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagementServiceServer).CreateTasks(&grpc.GenericServerStream[Task, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskManagementService_CreateTasksServer = grpc.ClientStreamingServer[Task, Message]

func _TaskManagementService_CreateTaskList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagementServiceServer).CreateTaskList(&grpc.GenericServerStream[Task, Task]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskManagementService_CreateTaskListServer = grpc.BidiStreamingServer[Task, Task]

func _TaskManagementService_GetAllTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).GetAllTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_GetAllTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).GetAllTask(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_GetTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).GetTaskById(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_UpdateTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).UpdateTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_UpdateTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).UpdateTaskById(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_DeleteTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).DeleteTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_DeleteTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).DeleteTaskById(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).UserLogin(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagementService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManagementService_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServiceServer).UserRegister(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskManagementService_ServiceDesc is the grpc.ServiceDesc for TaskManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskManagementService",
	HandlerType: (*TaskManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskManagementService_CreateTask_Handler,
		},
		{
			MethodName: "GetAllTask",
			Handler:    _TaskManagementService_GetAllTask_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _TaskManagementService_GetTaskById_Handler,
		},
		{
			MethodName: "UpdateTaskById",
			Handler:    _TaskManagementService_UpdateTaskById_Handler,
		},
		{
			MethodName: "DeleteTaskById",
			Handler:    _TaskManagementService_DeleteTaskById_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _TaskManagementService_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _TaskManagementService_UserRegister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTasks",
			Handler:       _TaskManagementService_CreateTasks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateTaskList",
			Handler:       _TaskManagementService_CreateTaskList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/task_management.proto",
}
